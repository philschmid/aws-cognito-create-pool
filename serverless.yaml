service: custom-user-pool
custom:
  poolname: user_todo
provider:
  name: aws
  stage: dev
  region: eu-central-1

resources:
  Resources:
# Cognito - User pool
#
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.poolname}_${self:provider.stage}_UserPool
        MfaConfiguration: OFF
        AdminCreateUserConfig:
          UnusedAccountValidityDays: 2
          AllowAdminCreateUserOnly: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            RequireLowercase: true
            RequireSymbols: false
            RequireNumbers: true
            MinimumLength: 10
            RequireUppercase: true
        UsernameAttributes:
          - email
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
# Cognito - Client
#
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.poolname}_${self:provider.stage}_UserPool_Client
        UserPoolId:
          Ref: CognitoUserPool
# Cognito - Group
#
    CognitoUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: User
        Precedence: 2
        UserPoolId:
          Ref: CognitoUserPool
    CognitoUserPoolGroup2:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: Admin
        Precedence: 1
        UserPoolId:
          Ref: CognitoUserPool
# Cognito - Identity
#
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.poolname}_${self:provider.stage}_IdentityPool
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
# CognitoIdentity Rolen zuweisung
#
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
# Braucht man nur beim ersten Mal erstellt die Role
#
#

    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.poolname}_${self:provider.stage}_authrole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                    - "lambda:*"
                    - "dynamo:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.poolname}_${self:provider.stage}_unauthrole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"

### Mögliche Attribute für UserPool
# Cloudformation link für quellen 
#https://docs.aws.amazon.com/de_de/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html 

#AliasAttributes:
#  - String
#AutoVerifiedAttributes:
#  - String
#DeviceConfiguration:
#  DeviceConfiguration
#EmailConfiguration:
#  EmailConfiguration
#EmailVerificationMessage: String
#EmailVerificationSubject: String
#LambdaConfig:
#  LambdaConfig
#MfaConfiguration: String
#Policies:
# #  Policies
# UserPoolName: ${self:provider.custom.stage}-XXXX
# Schema:
#   - AttributeDataType: String
#     Mutable: true
#     Name: role
# #SmsAuthenticationMessage: String
# #SmsConfiguration:
# #  SmsConfiguration
# #SmsVerificationMessage: String
# #UserPoolTags:
# #  String: String
